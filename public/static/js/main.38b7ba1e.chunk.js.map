{"version":3,"sources":["types.ts","config.ts","redux/actions/studentActions.ts","components/StudentForm.tsx","components/NavBar.tsx","redux/actions/examActions.ts","components/Question/Question.tsx","components/Exam.tsx","App.tsx","redux/store.ts","redux/reducers/studentReducer.ts","redux/reducers/examReducer.ts","serviceWorker.js","index.js"],"names":["ACTION_TYPES","config","ROOT_URL","StudentForm","useState","username","setUsername","dispatch","useDispatch","history","useHistory","studentState","useSelector","state","student","console","log","useEffect","name","push","loading","className","type","color","height","width","Form","onSubmit","e","preventDefault","LOADING","a","axios","post","response","data","CREATE_STUDENT","payload","Group","controlId","Label","Control","value","onChange","target","placeholder","Text","Button","variant","NavBar","examState","exam","questionIndex","maxQuestionsNo","getQuestionAction","alreadyUsedQuestions","get","JSON","stringify","answers","map","answer","index","question","description","correctAnswerIndex","id","GET_QUESTION","answerQuestionAction","questionId","answerIndex","ANSWER_QUESTION","Question","change","i","Check","defaultChecked","String","label","Exam","setQuestion","loadQuestion","setLoadQuestion","setLoading","setAnswerIndex","disptach","q","currentQuestion","arr","set","Set","size","length","rand","Math","floor","random","add","Array","from","shuffle","studentId","SUBMIT_EXAM","score","alreadyUsedIds","Number","currentTarget","onClick","NEXT_QUESTION","App","Container","Object","keys","path","component","exact","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","action","applyMiddleware","Thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38b7ba1e.chunk.js","sourcesContent":["export enum ACTION_TYPES {\r\n  CREATE_STUDENT,\r\n  LOADING,\r\n  Q_LOADING,\r\n  GET_QUESTION,\r\n  ANSWER_QUESTION,\r\n  NEXT_QUESTION,\r\n  SUBMIT_EXAM,\r\n}\r\nexport interface Student {\r\n  name: string;\r\n  id: string;\r\n}\r\nexport interface Question {\r\n  description?: string;\r\n  id: string;\r\n  answers?: { index: number; value: string }[];\r\n  correctAnswerIndex?: number;\r\n}\r\nexport interface OriginalQuestion {\r\n  description: string;\r\n  id: string;\r\n  answers: string[];\r\n  correctAnswerIndex: number;\r\n}\r\nexport interface CreateStudentAction {\r\n  type: ACTION_TYPES;\r\n  payload: Student;\r\n}\r\nexport interface GetQuestionAction {\r\n  type: ACTION_TYPES;\r\n  payload: Question;\r\n}\r\nexport interface AnswerQuestionAction {\r\n  type: ACTION_TYPES;\r\n  payload: Answer;\r\n}\r\nexport interface commonState {\r\n  loading: boolean;\r\n}\r\nexport type Action =\r\n  | CreateStudentAction\r\n  | GetQuestionAction\r\n  | AnswerQuestionAction;\r\nexport interface Answer {\r\n  questionId: string;\r\n  answerIndex: number;\r\n  correctAnswerIndex: number;\r\n}\r\nexport interface Exam {\r\n  alreadyUsedIds: string[];\r\n  answers: Answer[];\r\n  questionIndex: number;\r\n  maxQuestionsNo: number;\r\n  currentQuestion: Question;\r\n  score: number;\r\n}\r\n","export const config = {\r\n  ROOT_URL: \"\",\r\n};\r\n","import { ACTION_TYPES, CreateStudentAction, Student } from \"../../types\";\r\nimport axios from \"axios\";\r\nimport { config } from \"../../config\";\r\nconst { ROOT_URL } = config;\r\nconst _createStudent: (data: Student) => CreateStudentAction = (\r\n  data: Student\r\n) => {\r\n  return {\r\n    type: ACTION_TYPES.CREATE_STUDENT,\r\n    payload: data,\r\n  };\r\n};\r\nexport const loadStudent = () => {\r\n  return {\r\n    type: ACTION_TYPES.LOADING,\r\n  };\r\n};\r\nexport const createStudent = (name: string) => {\r\n  return async (dispatch: Function) => {\r\n    const response = await axios.post<Student>(`${ROOT_URL}/api/student`, {\r\n      name,\r\n    });\r\n\r\n    dispatch(_createStudent(response.data));\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nimport { Button,Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createStudent ,loadStudent} from \"../redux/actions/studentActions\";\r\nimport { StoreState } from \"../redux/store\";\r\nimport { StudentState } from \"../redux/reducers/studentReducer\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction StudentForm() {\r\n  const [username,setUsername]=useState(\"\")\r\n  const dispatch=useDispatch()\r\n  const history=useHistory()\r\n  const studentState:StudentState=useSelector<StoreState>(state=>state.student) as StudentState\r\n  console.log(\"studentStatestudentStatestudentState \",studentState)\r\n  let onsubmit=(e:any)=>{\r\n\r\n    e.preventDefault()\r\n    dispatch(loadStudent())\r\n    dispatch(createStudent(username))\r\n \r\n\r\n  }\r\n  useEffect(()=>{\r\n    if(studentState.name){\r\n      history.push(\"/exam\")\r\n    }\r\n    \r\n  },[studentState.name])\r\n  let onchange=(e:any)=>{\r\n    let value=e.target.value;\r\n    setUsername(value)\r\n  }\r\n  return <>\r\n  {studentState.loading&&<div className=\"overlay\">\r\n  <Loader\r\n        type=\"Oval\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n     \r\n      />\r\n    </div>}\r\n   <Form onSubmit={onsubmit}>\r\n    \r\n    <Form.Group controlId=\"formBasicEmail\">\r\n      <Form.Label>Your name</Form.Label>\r\n      <Form.Control value={username} onChange={onchange} placeholder=\"Enter Name\" />\r\n      <Form.Text className=\"text-muted\">\r\n        We'll never share your data with anyone else.\r\n      </Form.Text>\r\n    </Form.Group>\r\n  \r\n    <Button variant=\"primary\" type=\"submit\" >\r\n      Submit and start \r\n    </Button>\r\n  </Form>\r\n  </>\r\n\r\n\r\n}\r\n\r\nexport default StudentForm;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { ExamState } from '../redux/reducers/examReducer';\r\nimport { StudentState } from \"../redux/reducers/studentReducer\";\r\nimport { StoreState } from '../redux/store';\r\n\r\nconst NavBar = () => {\r\n    const studentState:StudentState=useSelector<StoreState>(state=>state.student) as StudentState\r\n    const examState:ExamState=useSelector<StoreState>(state=>state.exam) as ExamState\r\n   \r\n    return (\r\n        <div className=\"navbar\">\r\n           <h5>Welcome <strong>{studentState?.name}</strong></h5>\r\n          {examState.questionIndex<=examState.maxQuestionsNo&& <h6>Question {examState.questionIndex} of {examState.maxQuestionsNo}</h6>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import {\r\n  ACTION_TYPES,\r\n  GetQuestionAction,\r\n  Question,\r\n  OriginalQuestion,\r\n  AnswerQuestionAction,\r\n  Answer,\r\n} from \"../../types\";\r\nimport axios from \"axios\";\r\nimport { config } from \"../../config\";\r\nconst { ROOT_URL } = config;\r\nconst _getQuestion: (data: Question) => GetQuestionAction = (\r\n  data: Question\r\n) => {\r\n  return {\r\n    type: ACTION_TYPES.GET_QUESTION,\r\n    payload: data,\r\n  };\r\n};\r\nexport const loadQuestion = () => {\r\n  return {\r\n    type: ACTION_TYPES.Q_LOADING,\r\n  };\r\n};\r\nexport const getQuestionAction = (alreadyUsedQuestions: string[]) => {\r\n  return async (dispatch: Function) => {\r\n    const response = await axios.get<OriginalQuestion>(\r\n      `${ROOT_URL}/api/question?alreadyUsedIds=${JSON.stringify(\r\n        alreadyUsedQuestions\r\n      )}`\r\n    );\r\n    let answers = response.data.answers.map((answer: string, index: number) => {\r\n      return {\r\n        index,\r\n        value: answer,\r\n      };\r\n    });\r\n\r\n    let question: Question = {\r\n      description: response.data.description,\r\n      answers,\r\n      correctAnswerIndex: response.data.correctAnswerIndex,\r\n      id: response.data.id,\r\n    };\r\n    dispatch(_getQuestion(question));\r\n  };\r\n};\r\nconst _answerQuestion: (data: Answer) => AnswerQuestionAction = (\r\n  data: Answer\r\n) => {\r\n  return {\r\n    type: ACTION_TYPES.ANSWER_QUESTION,\r\n    payload: data,\r\n  };\r\n};\r\nexport const nextQuestionAction = () => {\r\n  return {\r\n    type: ACTION_TYPES.NEXT_QUESTION,\r\n  };\r\n};\r\nexport const answerQuestionAction = (\r\n  questionId: string,\r\n  correctAnswerIndex: number,\r\n  answerIndex: number\r\n) => {\r\n  return (dispatch: Function) => {\r\n    dispatch(_answerQuestion({ questionId, correctAnswerIndex, answerIndex }));\r\n  };\r\n};\r\n\r\nexport const submitExamAction = (studentId: string, answers: Answer[]) => {\r\n  return async (dispatch: Function) => {\r\n    const response = await axios.post<{ score: number }>(\r\n      `${ROOT_URL}/api/exam`,\r\n      {\r\n        studentId,\r\n        answers,\r\n      }\r\n    );\r\n\r\n    dispatch({\r\n      type: ACTION_TYPES.SUBMIT_EXAM,\r\n      payload: response.data.score,\r\n    });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst Question = ({\r\n  description,\r\n  answers,\r\n\r\n  change\r\n}: {\r\n  description: string;\r\n  answers: {index:number,value:string}[];\r\n  correctAnswerIndex: number;\r\n  change:any\r\n  \r\n}) => {\r\n \r\n  const type=\"radio\"\r\n    return (\r\n        <div className=\"question\">\r\n          <h3>{description}</h3>\r\n          <div className=\"q-options mb-3\">\r\n          {answers&&answers.map((answer,i)=>(\r\n                  <Form.Check \r\n                  key={`${answer.value}-${i}`}\r\n                  {...(i==0&&{defaultChecked:true})}\r\n                  onChange={change}\r\n                  name=\"answerOption\"\r\n                 type={type}\r\n                 id={String(answer.index)}\r\n                 label={`${answer.value} - ${answer.index}`}\r\n               />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Question;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Loader from 'react-loader-spinner';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { answerQuestionAction, nextQuestionAction, submitExamAction } from '../redux/actions/examActions';\r\nimport { getQuestionAction } from '../redux/actions/examActions';\r\nimport { ExamState } from '../redux/reducers/examReducer';\r\nimport { StudentState } from '../redux/reducers/studentReducer';\r\nimport { StoreState } from '../redux/store';\r\nimport {  Question as QType} from '../types';\r\nimport Question from './Question/Question';\r\nlet shuffle = (arr:{index:number,value:string}[]) => {\r\n    let set = new Set();\r\n    while (set.size !== arr.length) {\r\n      let rand = Math.floor(Math.random() * arr.length);\r\n      set.add(arr[rand]);\r\n    }\r\n    return Array.from(set)\r\n  };\r\nconst Exam = () => {\r\n    const [question,setQuestion]=useState<QType>()\r\n    const [loadQuestion,setLoadQuestion]=useState(true)\r\n    const [loading,setLoading]=useState(true)\r\n    const [answerIndex,setAnswerIndex]=useState(0)\r\n   \r\n\r\n    const disptach=useDispatch()\r\n    let examState:ExamState=useSelector<StoreState>(state=>state.exam) as ExamState\r\n    let history=useHistory()\r\n    let studentState:StudentState=useSelector<StoreState>(state=>state.student) as StudentState\r\n    // useEffect(()=>{\r\n    //     console.log(\"🚀 ~ file: Exam.tsx ~ line 29 ~ Exam ~ examState\", examState)\r\n\r\n    //     let q=examState.currentQuestion\r\n    //     if(q){\r\n    //            //@ts-ignore\r\n    //      q.answers=shuffle(q.answers)\r\n    //      setQuestion(q)\r\n    //      setLoading(false)\r\n    //     }\r\n         \r\n    // //@ts-ignore\r\n    // })\r\n    useEffect(()=>{\r\n      \r\n       if(loadQuestion){\r\n       \r\n\r\n            let q :any=examState.currentQuestion\r\n            if(q){\r\n                   //@ts-ignore\r\n             q.answers=shuffle(q.answers)\r\n             setQuestion(q)\r\n             setAnswerIndex(q.answers[0].index)\r\n             setLoading(false)\r\n             setLoadQuestion(false)\r\n            }\r\n       }\r\n       if(examState.questionIndex>examState.maxQuestionsNo){\r\n            disptach(submitExamAction(studentState.id, examState.answers))\r\n       }\r\n    },[examState.currentQuestion])\r\n    useEffect(()=>{\r\n        if(!studentState.name){\r\n            history.push(\"/\")\r\n            return\r\n        }\r\n        disptach(getQuestionAction(examState.alreadyUsedIds))\r\n\r\n    },[])\r\n    let next=()=>{\r\n        disptach(nextQuestionAction())\r\n        setLoading(true)\r\n        setLoadQuestion(true)\r\n       disptach(getQuestionAction(examState.alreadyUsedIds))\r\n       let id=question?.id as string\r\n       let correctAnswerIndex=question?.correctAnswerIndex as number\r\n        disptach(answerQuestionAction(id,correctAnswerIndex,answerIndex))\r\n    }\r\n    \r\n    const change=(e: React.FormEvent<HTMLInputElement>)=>{\r\n        setAnswerIndex(Number(e.currentTarget.id))\r\n    }\r\n\r\n    return (\r\n        \r\n        <div>\r\n              {loading&&<div className=\"overlay\" >  <Loader\r\n        type=\"Oval\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n     \r\n      /></div>}\r\n         {examState.questionIndex>examState.maxQuestionsNo&&<div className=\"overlay\">\r\n             {examState.score==-1?\"Caclulating your score...\":<div>Your score is : <h3>{examState.score}</h3></div>}\r\n\r\n         </div>}\r\n\r\n            {question&& <>    <Question description={question.description as string} change={change} answers={question.answers as {index:number,value:string}[]} correctAnswerIndex={0}></Question><Button onClick={next} variant=\"success\">Next</Button> </> }\r\n         \r\n        \r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exam;","import React, { useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button,Container,Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createStudent } from \"./redux/actions/studentActions\";\r\nimport StudentForm from \"./components/StudentForm\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport { StudentState } from \"./redux/reducers/studentReducer\";\r\nimport { StoreState } from \"./redux/store\";\r\nimport Exam from \"./components/Exam\";\r\n\r\nfunction App() {\r\n  const studentState:StudentState=useSelector<StoreState>(state=>state.student) as StudentState\r\n\r\n  return <>\r\n\r\n  <Container>\r\n    {Object.keys(studentState).length>1&& <NavBar></NavBar>}\r\n \r\n<div className=\"App\">\r\n  <div className=\"student-form\">\r\n \r\n     <Route path=\"/\" component={StudentForm} exact></Route>\r\n     <Route path=\"/exam\" component={Exam} exact></Route>\r\n </div>\r\n </div>\r\n  </Container>\r\n  </>\r\n\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\r\nimport Thunk from \"redux-thunk\";\r\nimport { Exam, Student } from \"../types\";\r\nimport { studentReducer } from \"./reducers/studentReducer\";\r\nimport { examReducer, ExamState } from \"./reducers/examReducer\";\r\n\r\nexport interface StoreState {\r\n  student: Student | {};\r\n  exam: ExamState;\r\n}\r\n\r\nconst initState = {};\r\n// allow Redux devtool\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  combineReducers<StoreState>({\r\n    student: studentReducer,\r\n    exam: examReducer,\r\n  }),\r\n  initState,\r\n  // Allow Async actions by using Thunk middleware\r\n  composeEnhancers(applyMiddleware(Thunk))\r\n);\r\n","import { ACTION_TYPES, Student, Action, commonState } from \"../../types\";\r\nexport interface StudentState extends Student, commonState {}\r\nexport const studentReducer = (\r\n  state: StudentState | {} = { loading: false },\r\n  action: Action\r\n) => {\r\n  let payload: Student = action.payload as Student;\r\n\r\n  switch (action.type) {\r\n    case ACTION_TYPES.CREATE_STUDENT:\r\n      return {\r\n        ...state,\r\n        name: payload.name,\r\n        id: payload.id,\r\n        loading: false,\r\n      };\r\n    case ACTION_TYPES.LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  ACTION_TYPES,\r\n  Exam,\r\n  Action,\r\n  commonState,\r\n  Question,\r\n  Answer,\r\n} from \"../../types\";\r\nexport interface ExamState extends Exam, commonState {\r\n  alreadyUsedIds: string[];\r\n}\r\nexport const examReducer = (\r\n  state: ExamState = {\r\n    loading: false,\r\n    alreadyUsedIds: [],\r\n    questionIndex: 1,\r\n    maxQuestionsNo: 5,\r\n    currentQuestion: null as any,\r\n    score: -1,\r\n    answers: [],\r\n  },\r\n  action: Action\r\n) => {\r\n  let payload: any = action.payload;\r\n\r\n  switch (action.type) {\r\n    case ACTION_TYPES.GET_QUESTION:\r\n      return {\r\n        ...state,\r\n        alreadyUsedIds: [...state.alreadyUsedIds, payload.id],\r\n        loading: false,\r\n        currentQuestion: payload,\r\n      };\r\n    case ACTION_TYPES.ANSWER_QUESTION:\r\n      return {\r\n        ...state,\r\n        answers: [...state.answers, payload] as Answer[],\r\n      };\r\n    case ACTION_TYPES.NEXT_QUESTION: {\r\n      return {\r\n        ...state,\r\n        questionIndex: state.questionIndex + 1,\r\n      };\r\n    }\r\n    case ACTION_TYPES.SUBMIT_EXAM: {\r\n      return {\r\n        ...state,\r\n        score: payload,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}